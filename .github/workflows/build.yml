name: build
on:
  push:
  pull_request:
  schedule:
    - cron: '0 2 * * 5'  # Every Friday at 2am
jobs:
  build_linux:
    name: build on Linux
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
          - os: ubuntu-20.04
          - os: ubuntu-18.04
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: actions/checkout@v3
      - name: Install build dependencies
        run: |-
          sudo apt-get update
          if [ "${{ matrix.os }}" = 'ubuntu-22.04' ]; then
              sudo apt-get install --yes --no-install-recommends libvtk9-dev libvtk9-qt-dev libgmock-dev
          elif [ "${{ matrix.os }}" = 'ubuntu-20.04' ]; then
              sudo apt-get install --yes --no-install-recommends libgmock-dev
          fi
          sudo apt-get install --yes --no-install-recommends \
              cmake              \
              libfftw3-dev       \
              libgdal-dev        \
              libgl1-mesa-dev    \
              libglu1-mesa-dev   \
              libgmt-dev         \
              libmotif-dev       \
              libnetcdf-dev      \
              libopencv-dev      \
              libpcl-dev         \
              libproj-dev        \
              libtirpc-dev       \
              libxt-dev          \
              qtbase5-dev        \
              qtdeclarative5-dev \
      - name: Configure CMake
        run: |-
          case "${{ matrix.os }}" in
          ubuntu-22.04)
             cmake -B ${{github.workspace}}/build -DbuildTRN=1 -DbuildPCL=1 -DBUILD_TESTING=1 -DbuildOpenCV=1 -DbuildQt=1;;
          ubuntu-20.04)
             cmake -B ${{github.workspace}}/build -DbuildTRN=1 -DbuildPCL=1 -DBUILD_TESTING=1 -DbuildOpenCV=1 -DbuildQt=0;;
          ubuntu-18.04)
             cmake -B ${{github.workspace}}/build -DbuildTRN=1 -DbuildPCL=1 -DBUILD_TESTING=0 -DbuildOpenCV=0 -DbuildQt=0;;
          esac
      - name: Build
        run: cmake --build ${{github.workspace}}/build --verbose
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest
  build_macos:
    name: build on MacOS
    strategy:
      matrix:
        include:
          - os: macos-12
          - os: macos-11
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: actions/checkout@v3
      - name: Install build dependencies
        run: |-
          brew install proj gdal netcdf fftw gmt openmotif googletest
          brew install --cask xquartz
      - name: Configure CMake
        run: |-
          cmake -B ${{github.workspace}}/build \
            -DCMAKE_PREFIX_PATH:PATH=/opt/X11 \
            -DOPENGL_opengl_LIBRARY:FILEPATH=/opt/X11/lib/libGL.dylib \
            -DOPENGL_gl_LIBRARY:FILEPATH=/opt/X11/lib/libGL.dylib \
            -DOPENGL_glu_LIBRARY:FILEPATH=/opt/X11/lib/libGLU.dylib \
            -DOPENGL_INCLUDE_DIR:PATH=/opt/X11/include \
            -DbuildTRN=1 -DbuildPCL=0 -DBUILD_TESTING=1 -DbuildOpenCV=0 -DbuildQt=0
      - name: Build
        run: cmake --build ${{github.workspace}}/build --verbose
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest
# FIXME: GMT fails to build with an internal compiler error
#  build_windows:
#    name: build on windows
#    strategy:
#      matrix:
#        include:
#          - os: windows-latest
#    runs-on: "${{ matrix.os }}"
#    steps:
#      - uses: actions/checkout@v3
#      - name: Cache object files
#        id: cache-vcpkg
#        uses: actions/cache@v3
#        with:
#          path: vcpkg
#          key: vcpkg-cache
#      - name: Download vcpkg
#        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
#        uses: actions/checkout@v3
#        with:
#          #repository: microsoft/vcpkg
#          repository: josch/vcpkg
#          path: vcpkg
#      - name: 'Configure Dependencies'
#        #if: steps.cache-vcpkg.outputs.cache-hit != 'true'
#        shell: pwsh
#        continue-on-error: true
#        run: |
#          cd vcpkg
#          git pull
#          Copy-Item triplets/x64-windows.cmake triplets/x64-windows-release.cmake
#          Add-Content triplets/x64-windows-release.cmake -Value "set(VCPKG_BUILD_TYPE release)"
#          ./bootstrap-vcpkg.bat
#          # gdal pulls in boost
#          # there is no GMT in vcpkg
#          #./vcpkg install --triplet x64-windows-release opengl fftw3 gdal netcdf-c proj
#          ./vcpkg install --triplet x64-windows-release gmt
#      - name: dump error log
#        run: |
#          #cat vcpkg/buildtrees/gmt/config-x64-windows-release-out.log
#          cat vcpkg/buildtrees/gmt/install-x64-windows-release-rel-out.log
#      - name: Configure CMake
#        shell: bash
#        run: cmake -B build -DVCPKG_TARGET_TRIPLET=x64-windows-release -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake
#      - name: Build
#        run: cmake --build ${{github.workspace}}/build --verbose
#      - name: Test
#        working-directory: ${{github.workspace}}/build
#        run: ctest
